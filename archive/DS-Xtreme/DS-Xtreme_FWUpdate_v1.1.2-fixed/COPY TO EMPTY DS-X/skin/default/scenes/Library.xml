<scene>

	<dependencies>
		<dependency type="scene" id="ArtistList"/>
		<dependency type="scene" id="AlbumList"/>
		<dependency type="scene" id="GenreList"/>
		<dependency type="scene" id="SongList"/>
	</dependencies>

	<script>
		<![CDATA[
		
			::albumListType <- "all";
			::albumListKey <- "";
			::songListType <- "all";
			::songListKey <- "";
			
			// Store some of the widgets for later use
			// so we don't have to look them up each time we need them.
			list <- null;
			searchProgress <- null;
			messageLabel1 <- null;

			searching <- false;

			scrollbar <- null;

			fromAudioMain <- null;
			
			// Store the scene effects for easy access or to keep them in scope.
			SceneEffects <- {
				listMove = null, // Move the list in from the right
				scrollBarMove = null,
				titleFade = null,
				optionsButtonmapFade = null,
				
				transitionEffects = null, // Group of transition effects
			}		
						
			// Set the final onscreen locations as the destinations of the effects			
			function SetupBeginTransition(scene)
			{	
				SceneEffects.listMove.setDestination(6,31);
				SceneEffects.scrollBarMove.setDestination(239,31);
				SceneEffects.titleFade.setEndAlpha(31);

				if(fromAudioMain)
				{
					scene.findWidget("media.buttonmapOptions").setAlpha(0);
					SceneEffects.optionsButtonmapFade.setEndAlpha(31);
				}
				else
					scene.findWidget("media.buttonmapOptions").setAlpha(31);
			}			

			// Set the initial offscreen locations as the destinations of the effects							
			function SetupEndTransition(scene)
			{	
				SceneEffects.listMove.setDestination(287,31);								
				SceneEffects.scrollBarMove.setDestination(522,31);
				SceneEffects.titleFade.setEndAlpha(0);

				if(fromAudioMain)
				{
					scene.findWidget("media.buttonmapOptions").setAlpha(31);
					SceneEffects.optionsButtonmapFade.setEndAlpha(0);
				}			
			}

			// This is called when the search task is complete
			function OnSearchComplete(event)
			{
				searching = false;
				
				// Hide the progress bar
				searchProgress.setVisible(false);
				
				if(0 != Library.getNumSongs())
				{
					messageLabel1.setVisible(false);
					
					BuildList()
					
					// Reset the position of the list and scrollbar to offscreen in order
					//   to transition them in from the right after search is complete
					list.setX(257);
					list.setVisible(true);
					list.focus();

					scrollbar._scrollbarWidget.setX(522);
					scrollbar.SetVisible(true);
					scrollbar.UpdateByListCount();

					SceneEffects.listMove.start();
					SceneEffects.scrollBarMove.start();

					scrollbar._scrollMove.setDestination(1,14);
					scrollbar._scrollMove.start();
				}
				else
				{
					messageLabel1.setText("No songs found!");
				}
			}

			// Searches for songs contained on the DS-X and adds them
			//   to the Library object
			function SearchForSongs()
			{
				searching = true;
				
				list.setVisible(false);
				scrollbar.SetVisible(false);
				
				// Change the text for the user to see
				messageLabel1.setText("Building Library...");
				messageLabel1.setVisible(true);
				
				// Reset the progress bar and make it visible
				searchProgress.setStep(0);
				searchProgress.setVisible(true);
				
				// Create a progress monitor and attach the progress bar to it
				local monitor = ProgressMonitor();
				searchProgress.attachToProgressMonitor(monitor);
				
				// Hook the task completed event on the monitor
				monitor.onComplete(OnSearchComplete.bindenv(this));
				
				// Initiate the search (The search is asynchronous)
				Library.findSongs(monitor);				
			}
			
			// This is called when the scene is being displayed
			function OnBegin(event)
			{
				// Set the destinations appropriately on the transition 
				// effects for the starting sequence
				SetupBeginTransition(event.getTarget());

				// Play the start transition
				SceneEffects.transitionEffects.start();

				if(0 == Library.getNumSongs())
				{
					SearchForSongs();
				}
				else
				{
					list.focus();
				}
			}
			
			// This is called before the next scene is displayed
			function OnEnd(event)
			{					
				// Set the destinations appropriately on the transition 
				// effects for the ending sequence
				SetupEndTransition(event.getTarget());
				
				// Setting the effect as the end effect on the event
				// will cause the framework to wait for the effect to 
				// finish before starting the next scene
				event.setEndEffect(SceneEffects.transitionEffects);
			}
			
			// Builds the library scene list
			function BuildList()
			{
					// Create the "All Songs" item
					local item = ListItem("all-songs");
					list.applyItemTemplate(item);
					local title = item.findWidget("title");
					title.setText("All Songs");
					list.addItem(item);

					// Create the "Artists" item
					item = ListItem("artists");
					list.applyItemTemplate(item);
					local title = item.findWidget("title");
					title.setText("Artists");
					list.addItem(item);
					
					// Create the "Albums" item
					item = ListItem("albums");
					list.applyItemTemplate(item);
					local title = item.findWidget("title");
					title.setText("Albums");
					list.addItem(item);
					
					// Create the "Genres" item
					item = ListItem("genres");
					list.applyItemTemplate(item);
					local title = item.findWidget("title");
					title.setText("Genres");
					list.addItem(item);
			}
			
			// Called when a list item is activated
			function OnItemActivated(event)
			{
				Advance();
			}
			
			// Called when the D-Pad is pressed on the device while the list is
			//    focused
			function OnDPadPressed(event)
			{
				local direction = event.getDirection();
				if(direction == event.Right)
				{
					Advance();
				}
				else if(direction == event.Left)
				{
					GoBack();
				}
			}
			
			// Called when the back button is clicked
			function OnBackClick(event)
			{
				GoBack();
			}	

			// Transitions to a new audio list scene
			function Advance()
			{
				fromAudioMain = false;

				local selectedIndex = list.getSelectedIndex();
				if(selectedIndex == 0)
				{
					songListType = "all";
					Application.getSceneManager().selectScene("SongList");
				}
				else if(selectedIndex == 1)
				{
					Application.getSceneManager().selectScene("ArtistList");
				}
				else if(selectedIndex == 2)
				{
					albumListType = "all";
					Application.getSceneManager().selectScene("AlbumList");				
				}
				else if(selectedIndex == 3)
				{
					Application.getSceneManager().selectScene("GenreList");
				}
			}
			
			// Called when a button is pressed on the device
			function OnButtonPressed(event)
			{
				if(event.getButton() == event.B)
				{
					GoBack();
				}	
			}
			
			// Transitions back to the audio main menu
			function GoBack()
			{
					if(!searching)
					{
						fromAudioMain = true;
						Application.getSceneManager().selectScene("AudioMain");		
					}	
			}
			
			// Summons a pop-up at the given coordinates			
			function DoPopupMenu(x, y)
			{
				local selectedItem = list.getSelectedItem();

				// If the selected index is 0 (songs), make a pop-up
				// Otherwise, no pop-up
				if( list.getSelectedIndex() == 0)
				{
					local popup = PopupMenu();
					popup.addMenuItem("Play All Songs");
					popup.addMenuItem("Queue All Songs");
					popup.addMenuItem("Cancel");
					popup.show(x, y);			
					
					local result = popup.getSelectedItem();
					if(result == 0)
					{
						NowPlaying.clear();
						NowPlaying.addAll();
						NowPlaying.startPlaying(0);	
					  Application.getSceneManager().selectScene("AudioMain");
					}
					else if(result == 1)
					{
						NowPlaying.addAll();
					}
				}			
			}

			// Called when a button is held on the device
			function OnButtonHold(event)
			{
				if(event.getButton() == event.A)
				{
					DoPopupMenu(50,50);
				}			
			}
			
			// Called when a touch hold event occurs on the list widget
			function OnTouchHold(event)
			{
				DoPopupMenu(event.getX(),event.getY());
			}
			
			// This is called when the selected index in the list is changed
			// We swap the texture which indicates to the user that the item
			// is selected.
			function OnSelectedIndexChanged(event)
			{
				local newIndex = event.getNewIndex();
				local oldIndex = event.getOldIndex();
				
				if(oldIndex >= 0)
				{
					// Change the previously selected list item to reflect the loss of focus
					local oldItem = list.getItem(oldIndex);
					local oldBackground = oldItem.findWidget("background");
					oldBackground.setTexture(400);
					oldBackground.setPalette(400);
				}
				
				if(newIndex >= 0)
				{
					// Change the newly selected list item to reflect focus has been gained
					local newItem = list.getItem(newIndex);
					local newBackground = newItem.findWidget("background");
					newBackground.setTexture(401);
					newBackground.setPalette(401);
				}
			}							
						
			// This is called when the scene is initialized (i.e., after the XML is loaded)
			function OnInit()
			{
				// The current event is always available from the Application object
				local event = Application.getEvent();
				local scene = event.getTarget();

				// Store some vars
				list = scene.findWidget("list");
				searchProgress = scene.findWidget("searchProgress");
				messageLabel1 = scene.findWidget("messageLabel1");

				local tex_list = [700, 720, 721, 722, 723, 724];
				scrollbar = Scrollbar(list, scene.findWidget("scrollbar"), tex_list, 6);

				// Set up initial locations (offscreen)
				// This could obviously be done in the xml, but sometimes it's nice to
				// keep the xml defined as what it will look like once fully presented
				list.setX(287);
				scene.findWidget("media.title").setAlpha(0);
									
				// Set up events
				SceneEffects.titleFade = FadeEffect();
				SceneEffects.titleFade.setTarget(scene.findWidget("media.title"));
				SceneEffects.titleFade.setDuration(300);

				SceneEffects.optionsButtonmapFade = FadeEffect();
				SceneEffects.optionsButtonmapFade.setTarget(scene.findWidget("media.buttonmapOptions"));
				SceneEffects.optionsButtonmapFade.setDuration(300);
				
				SceneEffects.listMove = MoveToEffect();
				SceneEffects.listMove.setTarget(list);
				SceneEffects.listMove.setDuration(300);

				SceneEffects.scrollBarMove = MoveToEffect();
				SceneEffects.scrollBarMove.setTarget(scene.findWidget("scrollbar"));
				SceneEffects.scrollBarMove.setDuration(300);

				// Group the events so they can be used as an end transition
				SceneEffects.transitionEffects = EffectGroup();
				SceneEffects.transitionEffects.addEffect(SceneEffects.listMove);
				SceneEffects.transitionEffects.addEffect(SceneEffects.scrollBarMove);
				SceneEffects.transitionEffects.addEffect(SceneEffects.titleFade);
				SceneEffects.transitionEffects.addEffect(SceneEffects.optionsButtonmapFade);
						
				// Hook scene events
				scene.onBegin(OnBegin);								
				scene.onEnd(OnEnd);
				scene.onButtonPressed(OnButtonPressed);
				scene.onButtonHold(OnButtonHold);
				
				// Hook list events
				list.onSelectedIndexChanged(OnSelectedIndexChanged);
				list.onItemActivated(OnItemActivated.bindenv(this));
				list.onDPadPressed(OnDPadPressed.bindenv(this));
				list.onTouchHold(OnTouchHold);
							
				// Hook the back button click event
				local back = scene.findWidget("back");
				back.onButtonClick(OnBackClick);					

				fromAudioMain = true;	
			}
		]]>
	</script>

	<objects>
		<image id="game.bg">
			<properties>
				<bounds x="0" y="0" width="256" height="192"/>
				<texture-id>1</texture-id>
				<palette-id>1</palette-id>
			</properties>
		</image>
		<image id="main.headerGradient">
			<properties>
				<depth>2</depth>
				<bounds x="0" y="0" width="256" height="28"/>
				<texture-id>7</texture-id>
				<palette-id>7</palette-id>
			</properties>
		</image>
		<image id="media.colorBlocks">
			<properties>
				<depth>10</depth>
				<bounds x="8" y="9" width="32" height="8"/>
				<texture-id>3</texture-id>
				<palette-id>3</palette-id>
			</properties>
		</image>
		<label id="media.title">
			<properties>
				<bounds x="44" y="0" width="90" height="25"/>
				<depth>10</depth>
				<color red="5" blue="5" green="5"/>
				<font name="default" size="12"/>
				<text>Library</text>
				<wrap-type>clip</wrap-type>
				<justify>left</justify>
				<vertical-align>middle</vertical-align>
				<!-- <shadow xoffset="2" yoffset="2"/> -->
			</properties>
		</label>
		<image id="media.buttonmapOk">
			<properties>
				<depth>10</depth>
				<bounds x="6" y="179" width="32" height="16"/>
				<texture-id>4</texture-id>
				<palette-id>4</palette-id>
			</properties>
		</image>
		<image id="media.buttonmapBack">
			<properties>
				<depth>10</depth>
				<bounds x="211" y="179" width="40" height="16"/>
				<texture-id>5</texture-id>
				<palette-id>5</palette-id>
			</properties>
		</image>
		<image id="media.buttonmapOptions">
			<properties>
				<depth>10</depth>
				<bounds x="38" y="182" width="104" height="8"/>
				<texture-id>402</texture-id>
				<palette-id>402</palette-id>
			</properties>
		</image>
		<button id="scrollbar">
			<properties>
				<bounds x="239" y="31" width="12" height="141"/>
				<depth>6</depth>
			</properties>
			<objects>
				<image id="bar">
					<properties>
						<depth>1</depth>
						<bounds x="-1" y="14" width="13" height="113"/>
						<texture-id>700</texture-id>
						<palette-id>700</palette-id>
					</properties>
				</image>
				<image id="scroller">
					<properties>
						<depth>2</depth>
						<bounds x="1" y="40" width="10" height="10"/>
						<texture-id>720</texture-id>
						<palette-id>720</palette-id>
					</properties>
				</image>
				<image id="uparrow">
					<properties>
						<depth>2</depth>
						<bounds x="0" y="0" width="12" height="14"/>
						<texture-id>721</texture-id>
						<palette-id>721</palette-id>
					</properties>
				</image>
				<image id="downarrow">
					<properties>
						<depth>2</depth>
						<bounds x="0" y="127" width="12" height="14"/>
						<texture-id>722</texture-id>
						<palette-id>722</palette-id>
					</properties>
				</image>				
			</objects>			
		</button>
    <list id="list">
      <properties>
        <bounds x="6" y="31" width="232" height="144"/>
        <depth>6</depth>
      </properties>
      
      <objects>
        <!-- bg image or whatever here -->
      </objects>
      
      <item-template>
        <properties>
          <bounds x="0" y="0" width="232" height="24"/>
          <depth>1</depth>
        </properties>
        <objects>
		<image id="background">
			<properties>
				<bounds x="0" y="0" width="232" height="22"/>
				<texture-id>400</texture-id>
				<palette-id>400</palette-id>
			</properties>
		</image>
          <label id="title">
            <properties>
              <bounds x="6" y="1" width="200" height="20"/>
              <depth>2</depth>
		<color red="15" blue="15" green="15"/>
              <font name="default" size="10"/>
              <wrap-type>clip</wrap-type>
              <justify>left</justify>
              <vertical-align>middle</vertical-align> 
            </properties>       
          </label>
        </objects>
      </item-template>
    </list>
		<label id="messageLabel1">
			<properties>
				<bounds x="0" y="80" width="256" height="20"/>
				<depth>2</depth>
				<color red="15" blue="15" green="15"/>
				<font name="default" size="14"/>
				<text>No songs found!</text>
				<wrap-type>clip</wrap-type>
				<justify>center</justify>
				<visible>false</visible>
				<vertical-align>middle</vertical-align>
			</properties>
		</label>
		<progress-bar id="searchProgress">
			<properties>
				<bounds x="55" y="105" width="152" height="12"/>
				<depth>11</depth>
				<progress-image>progressImage</progress-image>
				<visible>false</visible>
			</properties>
			<objects>
				<image id="progressImage">
          <properties>
            <texture-id>8</texture-id>
            <palette-id>8</palette-id>
          </properties>
        </image>
			</objects>
		
		</progress-bar>
		<button id="back">
			<properties>
				<bounds x="232" y="0" width="24" height="24"/>
				<depth>3</depth>
			</properties>
			<objects>
				<image id="background">
					<properties>
						<depth>1</depth>
						<bounds x="0" y="0" width="24" height="24"/>
						<texture-id>2</texture-id>
						<palette-id>2</palette-id>
					</properties>
				</image>
			</objects>
		</button>
	</objects>

	<events>
		<on-init><![CDATA[ OnInit(); ]]></on-init>
	</events>
</scene>